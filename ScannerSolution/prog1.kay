7// For KAY 
// Comment

// Kay is a case-sensitive language (True and False are uppercased)
// You do not need to write programs you can just write tests to test the 
// scanner

// keywords
bool 
else
if
integer
main
while
   
// separators
(
)
{
}
;
, // comma

// operators
||
!
&&
!=
==
>=
<=
<
>
/
*
-
+
:= // A comment 

// identifiers
a
aa
x
counter
a3 
do //  identifier
void // identifier in kay
true // identifier in kay
false // identifier in kay
X3 // 38 
TRUE // identifier

// literals 
True
False
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
100
256
6594
54932
543922
5838323
85403345
393920582
4894309432
58834324234
342894252085
5823943294892
48329483248322
595686866830384
4823980580280508
44820105839845032
432205294320580285

// lexical errors
= // Other - not recognized
3aaa2!=44444 // lexical error for 3aaa2 
@ // lexical error Other
& // lexical error
| // lexical error
1!==3 // literal(1) operator (!=) other(=) literal (3)

// Things to test!

1!2 // literal operator literal
1!=2 // literal operator (!=) literal
1! == 3 // literal operator (!) operator (==) literal
1==>4 // literal operator (==) operator (>) literal
** // operator operator
True && False // literal operator literal

// Missing tests

// Lexical errors
2.5 // we do not understand .
:
=
\
[
]

// Identifier
Xy1 // Capital first letter

// tests influenced from other languages
1,000,000	// Literal separator literal separator literal
/* test */	// operator operator identifier operator operator

// Negative numbers
!5 // operator literal

!== // operator(!=) other(=)

// This is not a Kay program but it is good for testing purposes
void main(){
int i;
i = 7;
}

22222

// void identifier
// main keyword
// ( separator
// ) separator
// { separator
// int identifier
// i identifier
// ; separator
// i identifier
// = other
// 7 literal
// ; separator
// } separator